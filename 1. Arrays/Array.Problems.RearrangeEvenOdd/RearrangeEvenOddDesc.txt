Rearrange array such that even positioned are greater than odd
Last Updated : 08 May, 2024
Given an array arr[] of N elements, sort the array according to the following relations:  

arr[i] >= arr[i – 1], if i is even, ∀ 1 <= i < N
arr[i] <= arr[i – 1], if i is odd, ∀ 1 <= i < N
Print the resultant array.

Examples:  

Input: N = 4, arr[] = {1, 2, 2, 1}
Output: 2 1 2 1
Explanation:

For i = 1, arr[1] <= arr[0]. So, 1 <= 2.
For i = 2, arr[2] >= arr[1]. So, 2 >= 1.
For i = 3, arr[3] <= arr[2]. So, 1 <= 2.
Input: arr[] = {1, 3, 2}
Output: 3 1 2
Explanation:

For i = 1, arr[1] <= arr[0]. So, 1 <= 3.
For i = 2, arr[2] >= arr[1]. So, 2 >= 1.
Recommended Problem
Rearrange array such that even positioned are greater than odd
Arrays
Sorting
+2 more
Solve Problem
Submission count: 9.8K
Approach: To solve the problem, follow the below idea:

Observe that array consists of [n/2] even positioned elements. If we assign the largest [n/2] elements to the even positions and the rest of the elements to the odd positions, our problem is solved. Because element at the odd position will always be less than the element at the even position as it is the maximum element and vice versa. Sort the array and assign the first [n/2] elements at even positions.

Below is the implementation of the above approach: 


using System;

class GFG {
    // function to rearrange the elements
    // in array such that even positioned are
    // greater than odd positioned elements
    static void assign(int[] arr, int N)
    {
        // Sort the array
        Array.Sort(arr);

        int[] ans = new int[N];
        int ptr1 = 0, ptr2 = N - 1;
        for (int i = 0; i < N; i++) {

            // Assign even indexes with maximum elements
            if (i % 2 == 0)
                ans[i] = arr[ptr2--];

            // Assign odd indexes with remaining elements
            else
                ans[i] = arr[ptr1++];
        }

        // Print result
        for (int i = 0; i < N; i++)
            Console.Write(ans[i] + " ");
    }

    // Driver code
    public static void Main()
    {
        int[] arr = { 1, 2, 2, 1 };
        int N = arr.Length;
        assign(arr, N);
    }
}

// This code is contributed by vt_m.

Output
2 1 2 1 
Time Complexity: O(N * log N), where N is the size of input array arr[].
Auxiliary Space: O(N)

Approach 2: Rearranging array by swapping elements

One other approach is to traverse the array from the first element till N – 1 and swap the element with the next one if the condition is not satisfied. This is implemented as follows: 


// C# program to rearrange the elements
// in the array such that even positioned are
// greater than odd positioned elements
using System;
class GFG {
    // function to rearrange the elements in array such that
    // even positioned are greater than odd positioned
    // elements
    static void Rearrange(int[] arr, int N)
    {
        for (int i = 0; i < N; i += 2) {
            // Compare it with the previous element
            if (i > 0 && arr[i - 1] > arr[i]) {
                int temp = arr[i - 1];
                arr[i - 1] = arr[i];
                arr[i] = temp;
            }

            // Compare it with the next element
            if (i < N - 1 && arr[i + 1] > arr[i]) {
                int temp = arr[i + 1];
                arr[i + 1] = arr[i];
                arr[i] = temp;
            }
        }
    }

    static void Main()
    {
        // Sample Input
        int N = 4;
        int[] arr = { 1, 2, 2, 1 };

        Rearrange(arr, N);

        for (int i = 0; i < N; i++)
            Console.Write(arr[i] + " ");
        Console.WriteLine();
    }
}

// This code is contributed by shivanisinghss2110

Output
2 1 2 1 
Time Complexity: O(N), where N is the size of input array arr[].
Auxiliary Space: O(1)

