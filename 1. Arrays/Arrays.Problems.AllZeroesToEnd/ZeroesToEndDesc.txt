Move all zeroes to end of array
Last Updated : 18 Sep, 2023
Given an array of random numbers, Push all the zero’s of a given array to the end of the array. For example, if the given arrays is {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0}, it should be changed to {1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0}. The order of all other elements should be same. Expected time complexity is O(n) and extra space is O(1).

Example: 

Input :  arr[] = {1, 2, 0, 4, 3, 0, 5, 0};
Output : arr[] = {1, 2, 4, 3, 5, 0, 0, 0};

Input : arr[]  = {1, 2, 0, 0, 0, 3, 6};
Output : arr[] = {1, 2, 3, 6, 0, 0, 0};
 
Recommended Problem
Move all zeroes to end of array
Arrays
Data Structures
Paytm
Amazon
+5 more
Solve Problem
Submission count: 1.8L
There can be many ways to solve this problem. Following is a simple and interesting way to solve this problem. 
Traverse the given array ‘arr’ from left to right. While traversing, maintain count of non-zero elements in array. Let the count be ‘count’. For every non-zero element arr[i], put the element at ‘arr[count]’ and increment ‘count’. After complete traversal, all non-zero elements have already been shifted to front end and ‘count’ is set as index of first 0. Now all we need to do is run a loop that makes all elements zero from ‘count’ till end of the array.

Below is the implementation of the above approach. 


/* C# program to push zeroes to back of array */
using System; 
  
class PushZero 
{ 
    // Function which pushes all zeros  
    // to end of an array. 
    static void pushZerosToEnd(int []arr, int n) 
    { 
        // Count of non-zero elements 
        int count = 0;  
          
        // Traverse the array. If element encountered is 
        // non-zero, then replace the element  
        // at index â..countâ.. with this element 
        for (int i = 0; i < n; i++) 
        if (arr[i] != 0) 
          
        // here count is incremented 
        arr[count++] = arr[i];  
          
        // Now all non-zero elements have been shifted to 
        // front and â..countâ.. is set as index of first 0. 
        // Make all elements 0 from count to end. 
        while (count < n) 
        arr[count++] = 0; 
    } 
      
    // Driver function  
    public static void Main () 
    { 
        int []arr = {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0, 9}; 
        int n = arr.Length; 
        pushZerosToEnd(arr, n); 
        Console.WriteLine("Array after pushing all zeros to the back: "); 
        for (int i = 0; i < n; i++) 
        Console.Write(arr[i] +" "); 
    } 
} 
/* This code is contributed by Anant Agrawal */
Output
Array after pushing all zeros to end of array:
1 9 8 4 2 7 6 9 0 0 0 0 
Time Complexity: O(n) where n is the size of elements of the input array.
Auxiliary Space: O(1)

Method 2: Partitioning the array

Approach: The approach is pretty simple. We will use 0 as a pivot element and whenever we see a non zero element we will swap it with the pivot element. So all the non zero element will come at the beginning.

Below is the implementation of the above approach. 


using System; 
public static class GFG 
{ 
    
    // C# Program to move all zeros to the end 
    public static void Main() 
    { 
        int[] A = { 5, 6, 0, 4, 6, 0, 9, 0, 8 }; 
        int n = A.Length; 
        int j = 0; 
        for (int i = 0; i < n; i++) { 
            if (A[i] != 0) { 
                int temp = A[j]; 
                A[j] = A[i]; 
                A[i] = temp; 
                j++; 
            } 
        } 
        for (int i = 0; i < n; i++) { 
            Console.Write(A[i]); 
            Console.Write(" "); 
        } 
    } 
} 
  
// This code is contributed by Aarti_Rathi
Output
5 6 4 6 9 8 0 0 0 
Time Complexity: O(N), where N is the size of elements of the input array.
Auxiliary Space: O(1) 

Method 3: using C++ STL

In this approach, we will traverse the whole array and will count the number of zeros present in the array. While counting we will delete the zero from the array.
After completing the above process, we will push back the count number of zeros into the array.

Below is the implementation of the above approach. 


// Include namespace system 
using System; 
using System.Collections.Generic; 
using System.Linq; 
using System.Collections; 
  
class GFG 
{ 
    // function to shift zeros 
    static void move_zeros_to_right(List<int> m) 
    { 
        var count = 0; 
        for (int i = 0; i < m.Count; i++) 
        { 
            if (m[i] == 0) 
            { 
                count++; 
                // deleting the element from vector 
                m.RemoveAt(i); 
                i--; 
            } 
        } 
        for (int i = 0; i < count; i++) 
        { 
            // inserting the zero into arraylist 
            m.Add(0); 
        } 
        Console.WriteLine("array after shifting zeros to right side: "); 
        for (int i = 0; i < m.Count; i++) 
        { 
            // printing desired arraylist 
            Console.Write(string.Join(", ",m[i]) + " "); 
        } 
    } 
    // Driver Code 
    public static void Main() 
    { 
        List<int> m = new List<int>(new int[] {5,6,0,4,6,0,9,0,8}); 
        
        // function call 
        GFG.move_zeros_to_right(m); 
    } 
} 
  
// This code is contributed by aadityaburujwale.
Output
array after shifting zeros to right side: 
5 6 4 6 9 8 0 0 0 
Time complexity: O(N), where N is the size of elements of the input array.
Auxiliary space: O(1).

Method-4: using extra space

In this approach, we will take an array of the same size as the input array and run a for loop on the input array. In that for loop, if the element does not equal 0, then place that element in the new array and if that element is 0 increase the count of 0. Then add as many 0 In that new array as we have the count of zeroes. Then copy elements of this new array into our old/input array.

Below is the implementation of the above approach


using System; 
  
class MainClass { 
    public static void Main(string[] args) 
    { 
        int[] A = { 5, 6, 0, 4, 6, 0, 9, 0, 8 }; 
        int n = A.Length; 
        int[] B = new int[n]; 
        int j = 0; 
        int count = 0; 
  
        for (int i = 0; i < n; i++) { 
            if (A[i] != 0) { 
                B[j] = A[i]; 
                j++; 
            } 
            else { 
                count++; 
            } 
        } 
  
        while (count > 0) { 
            B[j] = 0; 
            count--; 
            j++; 
        } 
  
        for (int i = 0; i < n; i++) { 
            A[i] = B[i]; 
        } 
  
        for (int i = 0; i < n; i++) { 
            Console.Write(A[i] + " "); // Print the array 
        } 
    } 
}
Output:

5 6 4 6 9 8 0 0 0 
Time complexity: O(N), where N is the size of elements of the input array.
Space complexity: O(N), for array B