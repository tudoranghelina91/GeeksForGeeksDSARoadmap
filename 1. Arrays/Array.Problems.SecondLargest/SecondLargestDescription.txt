Given an array of integers, our task is to write a program that efficiently finds the second-largest element present in the array. 

Examples:

Input: arr[] = {12, 35, 1, 10, 34, 1}
Output: The second largest element is 34.
Explanation: The largest element of the array is 35 and the second largest element is 34

Input: arr[] = {10, 5, 10}
Output: The second largest element is 5.
Explanation: The largest element of the array is 10 and the second largest element is 5

Input: arr[] = {10, 10, 10}
Output: The second largest does not exist.
Explanation: Largest element of the array is 10 there is no second largest element

Find Second Largest element using Sorting:
The idea is to sort the array in descending order and then return the second element which is not equal to the largest element from the sorted array.

Below is the implementation of the above idea:


using System;
using System.Linq;

class Program
{
    // Function to print the second largest element
    static void PrintSecondLargest(int[] arr)
    {
        // Sort the array in descending order
        Array.Sort(arr);
        Array.Reverse(arr);

        int n = arr.Length;
        int largest = arr[0];
        int secondLargest = -1;

        // Find the second largest element
        for (int i = 1; i < n; i++)
        {
            if (arr[i] != largest)
            {
                secondLargest = arr[i];
                break;
            }
        }

        if (secondLargest != -1)
            Console.WriteLine($"The second largest element is {secondLargest}");
        else
            Console.WriteLine("There is no second largest element");
    }

    // Driver code to test the function
    static void Main()
    {
        int[] arr = { 12, 35, 1, 10, 34, 1 };
        PrintSecondLargest(arr);
    }
}

// This code is contributed by shivamgupta0987654321

Output
The second largest element is 34
Time Complexity: O(nlogn), where n is the size of input array.
Auxiliary space: O(1), as no extra space is required.

Find Second Largest element by traversing the array twice (Two Pass):
The approach is to traverse the array twice. In the first traversal, find the maximum element. In the second traversal, find the greatest element excluding the previous greatest.

Below is the implementation of the above idea:


// C# program to find second largest
// element in an array
using System;

class GFG{

// Function to print the second largest elements 
static void print2largest(int []arr, int arr_size)
{
    // int first;
    int i, second;

    // There should be atleast two elements
    if (arr_size < 2)
    {
        Console.Write(" Invalid Input ");
        return;
    }

    int largest = second = int.MinValue;

    // Find the largest element
    for(i = 0; i < arr_size; i++)
    {
        largest = Math.Max(largest, arr[i]);
    }

    // Find the second largest element
    for(i = 0; i < arr_size; i++)
    {
        if (arr[i] != largest)
            second = Math.Max(second, arr[i]);
    }
    
    if (second == int.MinValue)
        Console.Write("There is no second " +
                      "largest element\n");
    else
        Console.Write("The second largest " +
                      "element is {0}\n", second);
}

// Driver code
public static void Main(String[] args)
{
    int []arr = { 12, 35, 1, 10, 34, 1 };
    int n = arr.Length;
    
    print2largest(arr, n);
}
} 

// This code is contributed by Amit Katiyar 

Output
Second largest : 34
Time Complexity: O(n), where n is the size of input array.
Auxiliary space: O(1), as no extra space is required.

Find Second Largest element by traversing the array once (One Pass):
The idea is to keep track of the largest and second largest element while traversing the array. If an element is greater than the largest element, we update the largest as well as the second largest. Else if an element is smaller than largest but greater than second largest, then we update the second largest only.

Below is the complete algorithm for doing this:  

Initialize the first as 0(i.e, index of arr[0] element
Start traversing the array from array[1],
If the current element in array say arr[i] is greater than first. Then update first and second as, second = first and first = arr[i]
If the current element is in between first and second, then update second to store the value of current variable as second = arr[i]
Return the value stored in second.
Below is the implementation of the above approach:


// C# Code for Find Second largest
// element in an array
using System;

class GFG {

    // Function to print the
    // second largest elements
    public static void print2largest(int[] arr,
                                     int arr_size)
    {
        int i, first, second;

        // There should be atleast two elements
        if (arr_size < 2) {
            Console.WriteLine(" Invalid Input ");
            return;
        }

        first = second = int.MinValue;
        for (i = 0; i < arr_size; i++) {
            // If current element is greater than
            // first then update both first and second
            if (arr[i] > first) {
                second = first;
                first = arr[i];
            }

            // If arr[i] is in between first
            // and second then update second
            else if (arr[i] > second && arr[i] != first)
                second = arr[i];
        }

        if (second == int.MinValue)
            Console.Write("There is no second largest"
                          + " element\n");
        else
            Console.Write("The second largest element"
                          + " is " + second);
    }

    // Driver Code
    public static void Main(String[] args)
    {
        int[] arr = { 12, 35, 1, 10, 34, 1 };
        int n = arr.Length;
        print2largest(arr, n);
    }
}

// This code is contributed by Parashar.

Output
Second largest : 34
Time Complexity: O(n), where n is the size of input array.
Auxiliary space: O(1), as no extra space is required.